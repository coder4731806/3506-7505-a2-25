// @edu:student-assignment

package uq.comp3506.a2.structures;

/**
 * Supplied by the COMP3506/7505 teaching team, Semester 2, 2025.
 * An abstract view of a vertex.
 * `S` is the type of the data payload stored at the vertex.
 */
public class Vertex<S> {

    /** 
     * Whenever we give you a Vertex in a graph, we promise its .id will be unique
     * However, we will make no promises on the range of the identifiers. 
     */
    private int id;

    /** Data stored at this vertex. We don't promise that these will be unique. */
    private S data;

    /** Simple constructor taking an identifier and some data*/
    public Vertex(int id, S data) {
        this.id = id;
        this.data = data;
    }

    /** returns the vertex id */
    public int getId() {
        return id;
    }

    /** sets the vertex id. Do not use this unless you know what you are doing,
     * the vertex identifier should be unique in a given graph.
     */
    public void setId(int id) {
        this.id = id;
    }

    /** returns the data payload*/
    public S getData() {
        return data;
    }

    /** sets (or updates) data payload*/
    public void setData(S data) {
        this.data = data;
    }
     
    /** Autogenerated - computes a hash for a Vertex type; since we promised
     * that id will be unique, we can use it as our hashcode.
     */
    @Override
    public int hashCode() {
        return this.id;
    }

    /** Autogenerated - computes equality for a Vertex type*/
    @Override
    public boolean equals(Object obj) {
        // 1. Check for reference equality
        if (this == obj) {
            return true;
        }
        // 2. Check for null and class type
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        // 3. Cast the object
        Vertex<?> other = (Vertex<?>) obj;
        // 4. Compare based on the unique ID
        return this.id == other.id;
    }
     

}
